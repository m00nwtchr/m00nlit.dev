---
import Head from '../components/Head.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import Starfield from '../components/Starfield.astro';
import { getLocale } from '../paraglide/runtime.js';

interface Props {
	title: string;
	keywords: string;
	description: string;
}

const { title, keywords, description } = Astro.props;
---

<!doctype html>
<html lang={getLocale()}>
	<head>
		<Head title={title} keywords={keywords} description={description} />
	</head>

	<body class="bg-steel-gray-950 text-silver-400 font-sans">
		<Header />

		<main>
			<slot />
		</main>

		<Footer />
		<Starfield />
	</body>
</html>

<script>
	function toggleFilter() {
		if (localStorage.getItem('lowPerformance') === 'true') {
			console.warn('Backdrop-filter disabled due to poor performance');
			document.body.classList.add('low-performance');
		}
	}

	function testPerformance() {
		const frameTimes = [];
		let frameCount = 0;

		function measureFrame() {
			const start = performance.now();
			requestAnimationFrame(() => {
				const end = performance.now();
				frameTimes.push(end - start);
				frameCount++;

				if (frameCount < 50) {
					measureFrame();
				} else {
					finalizeTest();
				}
			});
		}

		function finalizeTest() {
			const averageFrameTime =
				frameTimes.reduce((a, b) => a + b, 0) / frameTimes.length;

			console.debug(`Average frame time: ${averageFrameTime.toFixed(2)} ms`);

			if (averageFrameTime > 50) {
				localStorage.setItem('lowPerformance', true);
			} else {
				localStorage.setItem('lowPerformance', false);
			}

			toggleFilter();
		}

		measureFrame();
	}

	toggleFilter();
	testPerformance();
</script>
<script>
	(() => {
		// Gather <link rel="alternate" hreflang> elements
		const links = Array.from(
			document.querySelectorAll('link[rel="alternate"][hreflang]'),
		);

		// Build a map of hreflang -> href
		const langMap = new Map(
			links.map(link => [
				link.getAttribute('hreflang').toLowerCase(),
				link.href,
			]),
		);

		// Normalize to primary language
		const normalize = lang => lang.toLowerCase().split('-')[0];

		const currentUrl = window.location.href;

		// Core redirect logic
		const redirectToLang = langCodes => {
			for (const code of langCodes) {
				if (langMap.has(code)) {
					const target = new URL(langMap.get(code), document.baseURI).href;
					if (target !== currentUrl) {
						window.location.replace(target);
					}
					return true; // handled
				}
			}
			return false;
		};

		// Main runner: checks override then browser langs, then x-default
		const run = () => {
			const override = localStorage.getItem('preferredLang');
			if (override) {
				const codes = [override, normalize(override)];
				if (redirectToLang(codes)) return;
			}

			const userLangs =
				navigator.languages?.length > 0
					? navigator.languages
					: [navigator.language || navigator.userLanguage || ''];

			for (const rawLang of userLangs) {
				const full = rawLang.toLowerCase();
				const simple = normalize(full);
				if (redirectToLang([full, simple])) return;
			}

			if (langMap.has('x-default')) {
				redirectToLang(['x-default']);
			}
		};

		// Public API: set override and re-run logic
		window.setPreferredLanguage = lang => {
			localStorage.setItem('preferredLang', lang.toLowerCase());
			run();
		};

		// Listen for storage events (in case override changed in another tab)
		window.addEventListener('storage', e => {
			if (e.key === 'preferredLang') run();
		});

		// Initial invocation
		run();
	})();
</script>
